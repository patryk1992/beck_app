<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:p="http://primefaces.org/ui">


    
    <ui:composition>

        <p:dialog id="EventCreateDlg" widgetVar="EventCreateDialog" modal="true" resizable="false" appendTo="@(body)" onShow="init()" header="#{bundle.CreateEventTitle}">
            <h:form id="EventCreateForm">
                <h:panelGroup id="display">
                    <p:panelGrid columns="2" rendered="#{eventController.selected != null}">                     

                        <p:outputLabel value="#{bundle.CreateEventLabel_eventName}" for="eventName" />
                        <p:inputText id="eventName" value="#{eventController.selected.eventName}" title="#{bundle.CreateEventTitle_eventName}" />

                    </p:panelGrid>
                    <p:pickList id="pickList" value="#{eventController.groups}" var="groups" itemLabel="#{groups.groupName}" itemValue="#{groups}" effect="bounce" showSourceControls="true" showTargetControls="true" showCheckbox="true"
                                showSourceFilter="true" showTargetFilter="true" filterMatchMode="contains" >
                        <f:facet name="sourceCaption">DostÄ™pni</f:facet>
                        <f:facet name="targetCaption">Dodani</f:facet>                       
                        <f:converter converterId="com.beck.beck_app.Group1Converter" />
                    </p:pickList>



                  <p:gmap center="41.381542, 2.122893" zoom="15"  style="width:100%;height:400px" model="#{addMarkersViewController.emptyModel}" onPointClick="handlePointClick(event);"  widgetVar="map" id="map"  type="ROADMAP"/>
    
                  <p:dialog widgetVar="dlg" showEffect="fade"  >
        <h:panelGrid columns="2">
            <h:outputLabel for="title" value="Title:" />
            <p:inputText id="title" value="#{addMarkersViewController.title}" /> 
            <f:facet name="footer">
                <p:commandButton value="Add" actionListener="#{addMarkersViewController.addMarker}"  oncomplete="markerAddComplete()" />
                <p:commandButton value="Cancel" onclick="return cancel()" />
            </f:facet>
        </h:panelGrid> 
        <h:inputHidden id="lat" value="#{addMarkersViewController.lat}" />
        <h:inputHidden id="lng" value="#{addMarkersViewController.lng}" />        
    </p:dialog >    
        <p:commandButton actionListener="#{addMarkersViewController.saveMap(eventController.selected)}"  value="Save path"/> 
        <p:remoteCommand name="remoteCommandFunctionName"      actionListener="#{addMarkersViewController.addMarker}"/>
        <p:commandButton onclick="removeMarker();" value="Remove"/>  
   



                    <p:commandButton actionListener="#{eventController.create}" onclick="EventCreateDialog.hide()" value="#{bundle.Save}" update="display,:EventListForm:datalist,:growl" oncomplete="handleSubmit(args,'EventCreateDialog');"       >              
                        <f:actionListener binding="#{eventController.setProps(eventController.selected.eventName)}" />    
                        
                        <f:actionListener binding="#{eventController.saveGroups(userController.selected,group1Controller.selected)}"/>
                        <f:actionListener binding="#{addMarkersViewController.saveMap(eventController.selected)}"/>
                    </p:commandButton>
                    <p:commandButton value="#{bundle.Cancel}" onclick="EventCreateDialog.hide()"/>
                </h:panelGroup>
            </h:form>
        </p:dialog>
        
        <script src="http://maps.google.com/maps/api/js?sensor=false" 
        type="text/javascript"></script>
        <script type="text/javascript">
            var currentMarker = null;
            var listMarkers = [];
            var directionsService = new google.maps.DirectionsService();
            var directionsDisplay = new google.maps.DirectionsRenderer();
            var request;
            function init() {
                var mapOptions = {
                    center: new google.maps.LatLng(41.381542, 2.122893),
                    zoom: 15
                };
                map = new google.maps.Map(document.getElementById("EventCreateForm:map"), mapOptions);
                directionsDisplay.setMap(map);
                google.maps.event.addListener(map, 'click', function (e) {
                    handlePointClick(e.latLng, map);
                });

            }
            function handlePointClick(event) {
                if (currentMarker === null) {
                    document.getElementById('EventCreateForm:lat').value = event.latLng.lat();
                    document.getElementById('EventCreateForm:lng').value = event.latLng.lng();

                    currentMarker = new google.maps.Marker({
                        position: new google.maps.LatLng(event.latLng.lat(), event.latLng.lng())
                    });
                    markerAddComplete();
                }
            }
            function handlePointClick2(position, map) {
                if (currentMarker === null) {

                    currentMarker = new google.maps.Marker({
                        position: position,
                        map: map
                    });
                    markerAddComplete();

                }
            }

            function markerAddComplete() {
                var title = document.getElementById('title');
                listMarkers.push(currentMarker);

                currentMarker = null;
                if (listMarkers.length > 1) {
                    calcRoute();
                }
                remoteCommandFunctionName();
            }

            function cancel() {
                PF('dlg').hide();
                currentMarker.setMap(null);
                currentMarker = null;

                return false;
            }
            function removeMarker() {
                listMarkers.pop();
                calcRoute();
            }
            function calcRoute() {

                var waypts = [];
                for (var marker in listMarkers) {
                    listMarkers[marker].setVisible(false);
                    var element = listMarkers[marker].position;
                     if(marker &gt; 0 &amp;&amp; marker &lt; (listMarkers.length-1)){                
                        waypts.push({
                        location:""+element.A+","+element.F,
                        stopover:true});
                    }
                }


                request = {
                    origin: "" + listMarkers[0].position.A + "," + listMarkers[0].position.F,
                    destination: "" + listMarkers[listMarkers.length - 1].position.A + "," + listMarkers[listMarkers.length - 1].position.F,
                    waypoints: waypts,
                    travelMode: google.maps.TravelMode.WALKING
                };

                directionsService.route(request, function (response, status)
                {
                    if (status === google.maps.DirectionsStatus.OK) {
                        directionsDisplay.setDirections(response);
    //                        alert('ok');

                    }
                    else {
                        alert('failed');
                    }
                }
                );


            }
            google.maps.event.addDomListener(window, 'load', init);
        </script>
    </ui:composition>
</html>
