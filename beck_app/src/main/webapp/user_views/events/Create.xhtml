<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:p="http://primefaces.org/ui">


    
    <ui:composition>

        <p:dialog id="EventCreateDlg" widgetVar="EventCreateDialog" modal="true" resizable="false" appendTo="@(body)" onShow="init()" header="#{bundle.CreateEventTitle}">
           <p:scrollPanel style="height:600px">
            <h:form id="EventCreateForm">
                <h:panelGroup id="display">
                    <p:panelGrid columns="2" rendered="#{eventController.selected != null}">                     
                        <p:outputLabel value="#{bundle.CreateEventLabel_eventName}" for="eventName" />
                        <p:inputText id="eventName" value="#{eventController.selected.eventName}" title="#{bundle.CreateEventTitle_eventName}" />  
                        <p:outputLabel value="Opis" for="editor" />
                        <p:inputTextarea id="editor" widgetVar="editorWidget" value="#{eventController.selected.eventDesc}" rows="8" cols="45"/>

                    </p:panelGrid>
                    <p:pickList id="pickList" value="#{eventController.groups}" var="groups" itemLabel="#{groups.groupName}" itemValue="#{groups}" effect="bounce" showSourceControls="true" showTargetControls="true" showCheckbox="true"
                                showSourceFilter="true" showTargetFilter="true" filterMatchMode="contains" >
                        <f:facet name="sourceCaption">Dostępni</f:facet>
                        <f:facet name="targetCaption">Dodani</f:facet>                       
                        <f:converter converterId="com.beck.beck_app.Group1Converter" />
                    </p:pickList>



                  <p:gmap center="41.381542, 2.122893" zoom="15"  style="width:700px;height:400px" model="#{addMarkersViewController.emptyModel}" onPointClick="handlePointClick(event);"  widgetVar="map" id="map"  type="ROADMAP"/>
    
                  <p:dialog widgetVar="dlg" showEffect="fade"  >
        <h:panelGrid columns="2">
            <h:outputLabel for="title" value="Title:" />
            <p:inputText id="title" value="#{addMarkersViewController.title}" /> 
            <f:facet name="footer">
                <p:commandButton value="Add" actionListener="#{addMarkersViewController.addMarker}"  oncomplete="markerAddComplete()" />
                <p:commandButton value="Cancel" onclick="return cancel()" />
            </f:facet>
        </h:panelGrid> 
        <h:inputHidden id="lat" value="#{addMarkersViewController.lat}" />
        <h:inputHidden id="lng" value="#{addMarkersViewController.lng}" />        
    </p:dialog >    
        <p:remoteCommand name="remoteCommandFunctionName"      actionListener="#{addMarkersViewController.addMarker}"/>
       
   
       <p:commandButton actionListener="#{eventController.create}" value="Zapisz trasę" update="display,:EventListForm:datalist,:growl" oncomplete="handleSubmit(args,'EventCreateDialog');"       >              
                        <f:actionListener binding="#{eventController.setProps(eventController.selected.eventName)}" />     
                        <f:actionListener binding="#{eventController.saveGroups(userController.selected,group1Controller.selected)}"/>
                        <f:actionListener binding="#{addMarkersViewController.saveMap(eventController.selected)}"/>
                    </p:commandButton>
                    <p:commandButton onclick="removeMarker();" value="Usuń"/>  
                    <p:commandButton value="#{bundle.Cancel}" onclick="EventCreateDialog.hide()"/>
                    <p:commandButton  value="Dodaj zdjęcie" onclick="PF('dodanieImg').show()"/>
                </h:panelGroup>
            </h:form>
               <p:dialog widgetVar="dodanieImg" width="500px" >
                <h:form id="EventFormImg" prependId="true" enctype="multipart/form-data"  >
                
                <h:panelGrid columns="1" >      
                      <h:outputLabel value="Dodaj obrazek:" />
                    <p:fileUpload id="txtCatImage" label="Wybierz" cancelLabel="Anuluj" uploadLabel="Prześlij"
                                  value="#{eventNoticeController.selected.images}"
                                  mode="advanced"
                                  dragDropSupport="true"
                                  fileLimit="1"
                                  sizeLimit="300000"
                                  multiple="false"
                                  allowTypes="/(\.|\/)(gif|jpe?g|png)$/"
                                  fileUploadListener="#{imagesEventController.fileUploadListener}"/>

                    <p:commandButton id="btnSubmitS" value="Dodaj zdjecia"  onclick="EventCreateDialog.hide()" actionListener="#{imagesEventController.prepareCreate()}"   icon="ui-icon-disk"  ajax="false">
                       <f:actionListener binding="#{imagesEventController.insert()}" />
                       <f:actionListener binding="#{imagesEventController.selected.setImageDesc('test')}" />
                       <f:actionListener binding="#{imagesEventController.selected.setEventId(eventController.selected)}" />         
                       <f:actionListener binding="#{imagesEventController.create()}" />                 
                    </p:commandButton>
   
                </h:panelGrid>
            </h:form> 
               </p:dialog>
               
           </p:scrollPanel>
        </p:dialog>
        
       <script src="http://maps.google.com/maps/api/js?sensor=false" 
        type="text/javascript"></script>
        <script type="text/javascript">
                        var currentMarker = null;
                        var listMarkers = [];
                        var directionsService = new google.maps.DirectionsService();
                        var directionsDisplay = new google.maps.DirectionsRenderer();
                        var request;
                        function init() {
                            var mapOptions = {
                                center: new google.maps.LatLng(41.381542, 2.122893),
                                zoom: 15
                            };
                            map = new google.maps.Map(document.getElementById("EventCreateForm:map"), mapOptions);
                            directionsDisplay.setMap(map);
                            google.maps.event.addListener(map, 'click', function (e) {
                                handlePointClick(e.latLng, map);
                            });

                        }
                        function handlePointClick(event) {
                            if (currentMarker === null) {
                                document.getElementById('EventCreateForm:lat').value = event.A;
                                document.getElementById('EventCreateForm:lng').value = event.F;

                                currentMarker = new google.maps.Marker({
                                    position: new google.maps.LatLng(event.A, event.F),
                                    map: map
                                });
                                markerAddComplete();
                            }
                        }
                        function handlePointClick2(position, map) {
                            if (currentMarker === null) {

                                currentMarker = new google.maps.Marker({
                                    position: position,
                                    map: map
                                });
                                markerAddComplete();

                            }
                        }

                        function markerAddComplete() {
                            var title = document.getElementById('title');
                            listMarkers.push(currentMarker);

                            currentMarker = null;
                            if (listMarkers.length > 1) {
                                calcRoute();
                            }
                            remoteCommandFunctionName();
                        }

                        function cancel() {
                            PF('dlg').hide();
                            currentMarker.setMap(null);
                            currentMarker = null;

                            return false;
                        }
                        function removeMarker() {
                            listMarkers.pop();
                            calcRoute();
                        }
                        function calcRoute() {
                                
                            var waypts = [];
                            for (var marker in listMarkers) {
                                listMarkers[marker].setVisible(false);
                                var element = listMarkers[marker].position;
                                if (marker &gt; 0 &amp;&amp; marker &lt; (listMarkers.length - 1)){
                                    waypts.push({
                                        location: "" + element.A + "," + element.F,
                                        stopover: true});
                                }
                            }


                            request = {
                                origin: "" + listMarkers[0].position.A + "," + listMarkers[0].position.F,
                                destination: "" + listMarkers[listMarkers.length - 1].position.A + "," + listMarkers[listMarkers.length - 1].position.F,
                                waypoints: waypts,
                                travelMode: google.maps.TravelMode.WALKING
                            };

                            directionsService.route(request, function (response, status)
                            {
                                if (status === google.maps.DirectionsStatus.OK) {
                                    directionsDisplay.setDirections(response);
                                    //                        alert('ok');

                                }
                                else {
                                    alert('failed');
                                }
                            }
                            );


            }
            function calcRoute2() {
                 var mapOptions = {
                                center: new google.maps.LatLng(41.381542, 2.122893),
                                zoom: 15
                            };
                            map = new google.maps.Map(document.getElementById("EventViewForm:map"), mapOptions);
                            directionsDisplay.setMap(map);
                            google.maps.event.addListener(map, 'click', function (e) {
                                handlePointClick(e.latLng, map);
                            });

                //remoteChangeCommand();
                var valueFromSrver =document.getElementById('EventViewForm:hiddenButton').value;
                var mess=valueFromSrver.replace("]","").replace("[","");
                var tab=mess.split(", ");
                var waypts = [];
                for (var marker in tab) {                  
                    var element = tab[marker];
                     if(marker &gt; 0 &amp;&amp; marker &lt; (tab.length-1) &amp;&amp; marker &lt; 4){                
                        waypts.push({
                        location:element.replace(":",","),
                        stopover:true});
                    }
                } 


                request = {
                    origin: tab[0].replace(":",","),
                    destination: tab[tab.length - 1].replace(":",","),
                    waypoints: waypts,
                    travelMode: google.maps.TravelMode.WALKING
                };

                directionsService.route(request, function (response, status)
                {
                    if (status === google.maps.DirectionsStatus.OK) {
                        directionsDisplay.setDirections(response);
    //                        alert('ok');

                    }
                    else {
                        alert('failed');
                    }
                }
                );


            }
            google.maps.event.addDomListener(window, 'load', init);
        </script>
    </ui:composition>
</html>
